import re
import itertools
import math

def getSpecs(line):
    words=line.split(' ')
    return [words[0], list(map(int, [val for val in words[1:] if val!='']))]

def getStats(objects):
    totalCost=0
    totalDamage=0
    totalArmor=0
    
    for i in [object for object in objects if object[0]!='']:
        totalCost+=i[1]
        totalDamage+=i[2]
        totalArmor+=i[3]
    
    return [totalCost, totalDamage, totalArmor]
    
def getWinner(playerStats, enemyStats):
    playerAttack=max(playerStats[0]-enemyStats[1], 1)
    enemyAttack=max(enemyStats[0]-playerStats[1], 1)
    isEqual='not'
    if (math.ceil(100/playerAttack)==math.ceil(100/enemyAttack)) :
        isEqual='yes'
    
    print((math.ceil(100/playerAttack),math.ceil(100/enemyAttack), isEqual))
    
    return math.ceil(100/playerAttack)<=math.ceil(100/enemyAttack)    
    
def isWinner(playerStats, enemyStats):
    playerAttack=max(playerStats[0]-enemyStats[1], 1)
    enemyAttack=max(enemyStats[0]-playerStats[1], 1)
    
    return math.ceil(100/playerAttack)<=math.ceil(100/enemyAttack)
    
def isWinnerEx(playerStats, enemyStats, n, k):    
    playerAttack=max(playerStats[0]-enemyStats[1], 1)
    enemyAttack=max(enemyStats[0]-playerStats[1], 1)
 
    return math.ceil(n/playerAttack)<=math.ceil(k/enemyAttack)
    
    
with open('C:\\Users\\Alexis\\Documents\\Advent of Code\\Day 21\\input') as file:
    armors={}
    weapons={}
    rings={}
    
    headerPattern=re.compile('(\w+):')
    
    itemType='armor'
    
    for line in file:
        line=line.strip()
        header=headerPattern.match(line)
        if header!=None:
            print(header.group(1))
            itemType=header.group(1)
        else:
            item=getSpecs(line)
            if item[0]!='':
                if itemType=='Armor':
                    armors[item[0]]=item[1]
                elif itemType=='Weapons':
                    weapons[item[0]]=item[1]
                elif itemType=='Rings':
                    rings[item[0]]=item[1]

maximum=0
maxSet=[]                    

enemy=[8,2]
                    
for weapon in list(weapons.items()):
    for armor in list(armors.items())+[['',[]]]:
        toolset=[[weapon[0]]+weapon[1],[armor[0]]+armor[1]]
        specs=getStats(toolset)
        print(getWinner(specs[1:], enemy))
        print(weapon[0], armor[0], specs[0])
        if specs[0]>=maximum:
            if not isWinner(specs[1:], enemy):
                maximum=specs[0]
                #print(maxSet)
                print(maximum)
                maxSet=[weapon[0],armor[0]]
        for ring in ([list(x) for x in itertools.combinations(rings.items(), 2)]):
            toolset=[[weapon[0]]+weapon[1],[armor[0]]+armor[1]]+[[list(x)[0]]+list(x)[1] for x in ring]
            specs=getStats(toolset)
            print(getWinner(specs[1:], enemy))
            print(weapon[0], armor[0], [list(x)[0] for x in ring], specs[0])
            if specs[0]>=maximum:
                if not isWinner(specs[1:], enemy):
                    maximum=specs[0]
                    print(maximum)
                    #print(maxSet)
                    maxSet=[weapon[0],armor[0], ring]
        for ring in (list(rings.items())):
            toolset=[[weapon[0]]+weapon[1],[armor[0]]+armor[1], [ring[0]]+ring[1]]
            specs=getStats(toolset)
            print(getWinner(specs[1:], enemy))
            print(weapon[0], armor[0], ring[0], specs[0])
            if specs[0]>=maximum:
                if not isWinner(specs[1:], enemy):
                    maximum=specs[0]
                    #print(maxSet)
                    maxSet=[weapon[0],armor[0],ring[0]]

print(maximum)
print(maxSet)
                
        
    